// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/urijs.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const file = (() => {
  // Load data file
  const text = open("./data.json");
  const rows = JSON.parse(text);
  return rows;
})();
options.iterations = file.length;

const Iteration = Symbol.for("iteration");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    envWebHost: "sisclientweb-900162.campusnexus.dev",
    envAuthUser: "Administrator",
    envAuthPassword: "testing",
    envWebScheme: "https",
    envCollection:
      "/api/faculty-workload-hr-integration/job-functions-collection"
  },
  data: file
});

export default function() {
  postman[Iteration]();

  group("New Folder", function() {
    postman[Request]({
      name: "Initialize",
      id: "37738cfe-ce09-4e33-ae72-028ed3e40125",
      method: "GET",
      address: "{{gApiUrl}}",
      headers: {
        "Content-Type": "Content-Type"
      },
      pre() {
        // This is the first request in the collection, clear the global variables
        // used in the CRUD collection.   Do not do a clear all globals using pm.globals.clear
        // because that will remove the common code global variable gCmcUtility.

        pm.globals.unset("gApiUtility");
        pm.globals.unset("gApiUrl");
        pm.globals.unset("gAuthHeaderKey");
        pm.globals.unset("gAuthHeaderValue");
        pm.globals.unset("gUrl");
        pm.globals.unset("gCreateRequestBody");
        pm.globals.unset("gSaveRequestBody");
        pm.globals.unset("gGetRequestBody");
        pm.globals.unset("gObject");
        pm.globals.unset("gIndex");
        pm.globals.set("gIndex", 0);

        var apiUtilitHost = "";

        if (!pm.environment.has("envApiUtilityHost")) {
          apiUtilityHost = "10.156.14.135:9000";
        } else {
          apiUtilityHost = pm.environment.get("envApiUtilityHost");
        }

        var requestUrl =
          "http://" + apiUtilityHost + "/automation/apiUtility.js";

        pm.globals.set("gApiUrl", requestUrl);

        //console.log(pm.globals.get("gUrl"));
      },
      post(response) {
        pm.globals.set("gApiUtility", responseBody);

        try {
          eval(pm.globals.get("gApiUtility"));
        } catch (e) {}

        pm.test("Framework ready", function() {
          pm.expect(typeof apiUtility).to.be.equal("object");
        });

        pm.test("Verify response status is " + 200, function() {
          pm.expect(pm.response.code).to.equal(200);
        });

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get Campus ID",
      id: "8a34b8f7-c1ae-46bb-8906-f7323d91e63c",
      method: "GET",
      address: "{{gUrl}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        // Make authorization header using basic auth or API key settings in the data file.
        // If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        //console.log(pm.globals.get('gAuthHeaderKey'));
        //console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gCreateRequestBody", JSON.stringify(req));
        //console.log(pm.globals.get('gCreateRequestBody'));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Create",
      id: "40eb535f-8693-4663-a301-1bd9f6f28673",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gCreateRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        // Make authorization header using basic auth or API key settings in the data file.
        // If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        //console.log(pm.globals.get('gAuthHeaderKey'));
        //console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gCreateRequestBody", JSON.stringify(req));
        //console.log(pm.globals.get('gCreateRequestBody'));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "SaveNew Overload Assignment",
      id: "3bdec63e-de53-4cd8-8515-e633cefa490e",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gSaveRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gSaveRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "SaveNew onload Assignment type linked to overload assignment type",
      id: "851ef29e-58a2-4903-a136-7d3be3b87990",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gSaveRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gSaveRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get After SaveNew onload Assignment type",
      id: "7f400217-608f-4b62-8c18-5c80f14e77db",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));
        let API = data.Apis[pm.globals.get("gIndex")];
        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Save onload assignment type",
      id: "3c8affc9-b536-49da-9a9a-ab5c0582007b",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gSaveRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        // Make authorization header using basic auth or API key settings in the data file.
        // If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        //console.log(pm.globals.get('gAuthHeaderKey'));
        //console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gSaveRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Create Load Validation Policy",
      id: "d4b02d96-40d7-4355-99df-842b29e3a520",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gCreateRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        // Make authorization header using basic auth or API key settings in the data file.
        // If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        //console.log(pm.globals.get('gAuthHeaderKey'));
        //console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gCreateRequestBody", JSON.stringify(req));
        //console.log(pm.globals.get('gCreateRequestBody'));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "SaveNew Load Validation Policy",
      id: "9980887d-09c8-4ce6-9cd1-220edc4ed752",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gSaveRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gSaveRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get  onload assignment type",
      id: "45e044cf-daaa-4971-a8f6-f34fa71f6852",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete Load Rule",
      id: "d0841c2c-dc6c-4931-b405-153f63710413",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get Load Rule",
      id: "7b62c510-8406-4c29-a1b8-2dd611dd4544",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete onload assignment type association check",
      id: "f8821dd6-8b89-4e6b-acfb-75dd6340c99e",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get overload assignment type",
      id: "8b7529e0-ff5e-4c84-a43c-9a364c992831",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete overload assignment type Cross Validation",
      id: "e07b09d5-d71e-450e-8b77-ba7e46674a1a",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get After Save onload assignment type",
      id: "25320382-9ee5-4ee8-a32a-301517539850",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete onload assignment type",
      id: "4ce39f9d-b6f9-41af-8a8f-22ebf4e14915",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get After Delete onload assignment type",
      id: "9e24fb4c-3f46-4d39-9f6a-9ca8485ffa82",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete overload assignment type",
      id: "b8809080-1b02-483a-9671-a761887e9868",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get After Delete overload assignment type",
      id: "28fa0067-3b08-4b76-98bc-3acc00d6e076",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });
  });
}
