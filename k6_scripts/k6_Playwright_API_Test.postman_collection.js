// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import http from "k6/http";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    base_url: "https://sisclientweb-900149.campusnexus.dev"
  }
});

const files = {};
files[
  "C:/Users/alok.shrivastava/automation/postman-k6-poc/collections/Playwright_API_Test.postman_collection.json"
] = http.file(
  open(
    "C:/Users/alok.shrivastava/automation/postman-k6-poc/collections/Playwright_API_Test.postman_collection.json",
    "b"
  ),
  "Playwright_API_Test.postman_collection.json"
);

export default function() {
  postman[Request]({
    name: "Registration",
    id: "12ecb0e3-a81f-4fc3-bab0-4a19c1a019dd",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/authaccount/registration",
    data:
      '{\r\n\r\n            "name":"Developer",\r\n            "email":"alok.s@gmail.com",\r\n            "password":123456\r\n}',
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test(
        "Response has the required Content-Type header with value 'application/json'",
        function() {
          pm.expect(pm.response.headers.get("Content-Type")).to.include(
            "application/json"
          );
        }
      );

      pm.test("Code is a non-negative integer", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.code).to.be.a("number");
        pm.expect(responseData.code).to.be.at.least(0);
      });

      pm.test("Message is a non-empty string", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.message)
          .to.be.a("string")
          .and.to.have.lengthOf.at.least(1, "Message should not be empty");
      });

      pm.test("Data is null or an empty object", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData.data).to.satisfy(data => {
          return data === null || Object.keys(data).length === 0;
        }, "Data should be null or an empty object");
      });
    }
  });

  postman[Request]({
    name: "Login",
    id: "aefeba7f-45f5-4acd-900f-5ec8820905ee",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/authaccount/login",
    data: '{\r\n\t"email":"alok.s@gmail.com",\r\n\t"password":123456\r\n}',
    post(response) {
      pm.test("Your test name", function() {
        var jsonData = pm.response.json();
        let token = jsonData.data.Token;
        pm.environment.set("token", token);
      });
    }
  });

  postman[Request]({
    name: "Get users from page 1",
    id: "71560831-3ded-4d55-891f-099d25099bdc",
    method: "GET",
    address: "http://restapi.adequateshop.com/api/users?page=1",
    headers: {
      Authorization: "Bearer {{token}}"
    },
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test("Response has the required fields", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData).to.have.property("page");
        pm.expect(responseData).to.have.property("per_page");
        pm.expect(responseData).to.have.property("totalrecord");
        pm.expect(responseData).to.have.property("total_pages");
        pm.expect(responseData).to.have.property("data");
      });

      pm.test("Email is in a valid format", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.data).to.be.an("array");
        responseData.data.forEach(function(user) {
          pm.expect(user.email).to.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        });
      });
    }
  });

  postman[Request]({
    name: "User Details",
    id: "8b569d7d-723c-49eb-82a4-e61f75865c62",
    method: "GET",
    address: "http://restapi.adequateshop.com/api/users/292528",
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "Create User",
    id: "dd5b3e54-2c0b-4f4b-96b9-ec6f1a4ebdad",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/users",
    data:
      '{\r\n\r\n\t"name":"photographer",\r\n\t"email":"photographer@gmail.com",\r\n\t"location":"USA"\r\n}',
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "update user details",
    id: "9b79d1cd-4cca-4d54-8780-6a26cee5fdda",
    method: "PUT",
    address: "http://restapi.adequateshop.com/api/users/292528",
    data:
      '{\r\n    "id": 292543,\r\n\t"name":"photogrpher change name",\r\n\t"email":"photogrpher@gmail.com",\r\n\t"location":"USA"\r\n}',
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "Delete uSER",
    id: "64b98ebc-1928-4b95-82aa-53d56bf8dd39",
    method: "DELETE",
    address: "http://restapi.adequateshop.com/api/users/292528",
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "https://fakestoreapi.com/products/1",
    id: "b5ec9971-ca7c-4eeb-a66b-e817917809c2",
    method: "GET",
    address: "https://fakestoreapi.com/products/1",
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test("Content-Type header is application/json", function() {
        pm.expect(pm.response.headers.get("Content-Type")).to.include(
          "application/json"
        );
      });

      pm.test("Price is a non-negative number", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData.price).to.be.a("number");
        pm.expect(responseData.price).to.be.at.least(0);
      });

      pm.test(
        "Rating object is present and contains expected properties",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.rating).to.exist;
          pm.expect(responseData.rating).to.have.property("rate");
          pm.expect(responseData.rating).to.have.property("count");
        }
      );
    }
  });

  postman[Request]({
    name: "https://api.escuelajs.co/api/v1/files/upload",
    id: "b666e45c-a418-4ec7-8f7a-dd15b80045fd",
    method: "POST",
    address: "https://api.escuelajs.co/api/v1/files/upload",
    data: {
      file:
        files[
          "C:/Users/alok.shrivastava/automation/postman-k6-poc/collections/Playwright_API_Test.postman_collection.json"
        ]
    }
  });
}


import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js";
import { textSummary } from "https://jslib.k6.io/k6-summary/0.0.1/index.js";

export function handleSummary(data) {
  return {
    "reports/k6_Playwright_API_Test.postman_collection.html": htmlReport(data),
    stdout: textSummary(data, { indent: " ", enableColors: true }),
  };
}