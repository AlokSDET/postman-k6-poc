// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import http from "k6/http";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    base_url: "https://sisclientweb-900149.campusnexus.dev"
  }
});

const files = {};
files[
  "C:/Users/alok.shrivastava/automation/postman-k6-poc/collections/Playwright_API_Test.postman_collection.json"
] = http.file(
  open(
    "C:/Users/alok.shrivastava/automation/postman-k6-poc/collections/Playwright_API_Test.postman_collection.json",
    "b"
  ),
  "Playwright_API_Test.postman_collection.json"
);

export default function() {
  postman[Request]({
    name: "Registration",
    id: "4c8a9a37-f04a-4c41-843b-2e1a5e5a79af",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/authaccount/registration",
    data:
      '{\r\n\r\n            "name":"Developer",\r\n            "email":"alok.s@gmail.com",\r\n            "password":123456\r\n}',
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test(
        "Response has the required Content-Type header with value 'application/json'",
        function() {
          pm.expect(pm.response.headers.get("Content-Type")).to.include(
            "application/json"
          );
        }
      );

      pm.test("Code is a non-negative integer", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.code).to.be.a("number");
        pm.expect(responseData.code).to.be.at.least(0);
      });

      pm.test("Message is a non-empty string", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.message)
          .to.be.a("string")
          .and.to.have.lengthOf.at.least(1, "Message should not be empty");
      });

      pm.test("Data is null or an empty object", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData.data).to.satisfy(data => {
          return data === null || Object.keys(data).length === 0;
        }, "Data should be null or an empty object");
      });
    }
  });

  postman[Request]({
    name: "Login",
    id: "d71fc0bc-db2f-4894-8e45-fe54b046633e",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/authaccount/login",
    data: '{\r\n\t"email":"alok.s@gmail.com",\r\n\t"password":123456\r\n}',
    post(response) {
      pm.test("Your test name", function() {
        var jsonData = pm.response.json();
        let token = jsonData.data.Token;
        pm.environment.set("token", token);
      });
    }
  });

  postman[Request]({
    name: "Get users from page 1",
    id: "46d5ba5a-2650-49a5-b513-2f40c8cf61c1",
    method: "GET",
    address: "http://restapi.adequateshop.com/api/users?page=1",
    headers: {
      Authorization: "Bearer {{token}}"
    },
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test("Response has the required fields", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData).to.have.property("page");
        pm.expect(responseData).to.have.property("per_page");
        pm.expect(responseData).to.have.property("totalrecord");
        pm.expect(responseData).to.have.property("total_pages");
        pm.expect(responseData).to.have.property("data");
      });

      pm.test("Email is in a valid format", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.data).to.be.an("array");
        responseData.data.forEach(function(user) {
          pm.expect(user.email).to.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        });
      });
    }
  });

  postman[Request]({
    name: "User Details",
    id: "7829692b-62da-4d21-bedc-7c08f51a49f6",
    method: "GET",
    address: "http://restapi.adequateshop.com/api/users/292528",
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "Create User",
    id: "cab044d6-5605-4f29-993d-683247588d3e",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/users",
    data:
      '{\r\n\r\n\t"name":"photographer",\r\n\t"email":"photographer@gmail.com",\r\n\t"location":"USA"\r\n}',
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "update user details",
    id: "d49984f3-8811-449a-9516-780459c32a39",
    method: "PUT",
    address: "http://restapi.adequateshop.com/api/users/292528",
    data:
      '{\r\n    "id": 292543,\r\n\t"name":"photogrpher change name",\r\n\t"email":"photogrpher@gmail.com",\r\n\t"location":"USA"\r\n}',
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "Delete uSER",
    id: "73212e41-41c8-4e31-91d5-582ddba11292",
    method: "DELETE",
    address: "http://restapi.adequateshop.com/api/users/292528",
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "https://fakestoreapi.com/products/1",
    id: "d121d8e2-b547-4100-b18c-d1ab51e720be",
    method: "GET",
    address: "https://fakestoreapi.com/products/1",
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test("Content-Type header is application/json", function() {
        pm.expect(pm.response.headers.get("Content-Type")).to.include(
          "application/json"
        );
      });

      pm.test("Price is a non-negative number", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData.price).to.be.a("number");
        pm.expect(responseData.price).to.be.at.least(0);
      });

      pm.test(
        "Rating object is present and contains expected properties",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.rating).to.exist;
          pm.expect(responseData.rating).to.have.property("rate");
          pm.expect(responseData.rating).to.have.property("count");
        }
      );
    }
  });

  postman[Request]({
    name: "https://api.escuelajs.co/api/v1/files/upload",
    id: "d8300c6d-9733-4be6-85b7-22ef24f828f4",
    method: "POST",
    address: "https://api.escuelajs.co/api/v1/files/upload",
    data: {
      file:
        files[
          "C:/Users/alok.shrivastava/automation/postman-k6-poc/collections/Playwright_API_Test.postman_collection.json"
        ]
    }
  });
}


import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js";
import { textSummary } from "https://jslib.k6.io/k6-summary/0.0.1/index.js";

export function handleSummary(data) {
  return {
    "k6_Playwright_API_Test.postman_collection.html": htmlReport(data),
    stdout: textSummary(data, { indent: " ", enableColors: true }),
  };
}