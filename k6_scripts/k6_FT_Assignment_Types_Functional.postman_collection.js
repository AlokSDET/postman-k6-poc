// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/urijs.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const file = (() => {
  // Load data file
  const text = open("./data.json");
  const rows = JSON.parse(text);
  return rows;
})();
options.iterations = file.length;

const Iteration = Symbol.for("iteration");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    envWebHost: "sisclientweb-900162.campusnexus.dev",
    envAuthUser: "automationuser@CampusNexus.Dev",
    envAuthPassword: "ZetaTitans@12",
    envWebScheme: "https",
    envCollection:
      "/api/faculty-workload-hr-integration/job-functions-collection"
  },
  data: file
});

export default function() {
  postman[Iteration]();

  group("New Folder", function() {
    postman[Request]({
      name: "Initialize",
      id: "104e9adc-ba02-4ef6-971c-fe9f603d1a3e",
      method: "GET",
      address: "{{gApiUrl}}",
      headers: {
        "Content-Type": "Content-Type"
      },
      pre() {
        // This is the first request in the collection, clear the global variables
        // used in the CRUD collection.   Do not do a clear all globals using pm.globals.clear
        // because that will remove the common code global variable gCmcUtility.

        pm.globals.unset("gApiUtility");
        pm.globals.unset("gApiUrl");
        pm.globals.unset("gAuthHeaderKey");
        pm.globals.unset("gAuthHeaderValue");
        pm.globals.unset("gUrl");
        pm.globals.unset("gCreateRequestBody");
        pm.globals.unset("gSaveRequestBody");
        pm.globals.unset("gGetRequestBody");
        pm.globals.unset("gObject");
        pm.globals.unset("gIndex");
        pm.globals.set("gIndex", 0);

        var apiUtilitHost = "";

        if (!pm.environment.has("envApiUtilityHost")) {
          apiUtilityHost = "10.156.14.135:9000";
        } else {
          apiUtilityHost = pm.environment.get("envApiUtilityHost");
        }

        var requestUrl =
          "http://" + apiUtilityHost + "/automation/apiUtility.js";

        pm.globals.set("gApiUrl", requestUrl);

        //console.log(pm.globals.get("gUrl"));
      },
      post(response) {
        pm.globals.set("gApiUtility", responseBody);

        try {
          eval(pm.globals.get("gApiUtility"));
        } catch (e) {}

        pm.test("Framework ready", function() {
          pm.expect(typeof apiUtility).to.be.equal("object");
        });

        pm.test("Verify response status is " + 200, function() {
          pm.expect(pm.response.code).to.equal(200);
        });

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get Campus ID",
      id: "d87c1364-8b20-4cbe-ae12-983d9a322336",
      method: "GET",
      address: "{{gUrl}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        // Make authorization header using basic auth or API key settings in the data file.
        // If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        //console.log(pm.globals.get('gAuthHeaderKey'));
        //console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gCreateRequestBody", JSON.stringify(req));
        //console.log(pm.globals.get('gCreateRequestBody'));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Create",
      id: "d9f13b3f-be6d-46a3-864c-9e007d0f57b8",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gCreateRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        // Make authorization header using basic auth or API key settings in the data file.
        // If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        //console.log(pm.globals.get('gAuthHeaderKey'));
        //console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gCreateRequestBody", JSON.stringify(req));
        //console.log(pm.globals.get('gCreateRequestBody'));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "SaveNew Overload Assignment",
      id: "55bb0c7e-d7a3-4258-8550-5f06c41b91c3",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gSaveRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gSaveRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "SaveNew onload Assignment type linked to overload assignment type",
      id: "c8675c65-d0f7-436e-9672-9e9e9229ca86",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gSaveRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gSaveRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get After SaveNew onload Assignment type",
      id: "4cc3cb6b-173e-4ce6-9d73-93777cb69437",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));
        let API = data.Apis[pm.globals.get("gIndex")];
        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Save onload assignment type",
      id: "e093cc2d-05f3-47f8-b56e-a913d1d1a321",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gSaveRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        // Make authorization header using basic auth or API key settings in the data file.
        // If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        //console.log(pm.globals.get('gAuthHeaderKey'));
        //console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gSaveRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Create Load Validation Policy",
      id: "43b2ea1f-e2c4-4b62-b84d-0f6e56d694b8",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gCreateRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        // Make authorization header using basic auth or API key settings in the data file.
        // If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        //console.log(pm.globals.get('gAuthHeaderKey'));
        //console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gCreateRequestBody", JSON.stringify(req));
        //console.log(pm.globals.get('gCreateRequestBody'));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "SaveNew Load Validation Policy",
      id: "7bd5aa73-7dd6-4021-8f47-4b75f621cc88",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gSaveRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gSaveRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });
        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get  onload assignment type",
      id: "06ee2b1f-ef21-4521-a58d-fe74854a9aca",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete Load Rule",
      id: "3b74ffe2-e743-46d6-afbb-895fce483dac",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get Load Rule",
      id: "14b79608-ea36-4eca-9332-518f43a687d0",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete onload assignment type association check",
      id: "70bfaaf5-47a7-4252-b153-84609a8b85dc",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get overload assignment type",
      id: "d869456e-7a3f-4d21-8be9-4142a2ad89d7",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete overload assignment type Cross Validation",
      id: "9faf854c-9e84-4575-a289-43a2248f921e",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get After Save onload assignment type",
      id: "167efa87-0658-40b3-9caf-ccce6a2b2fa6",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete onload assignment type",
      id: "55f634dd-88a7-48a0-8dc8-42feeba23d6c",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get After Delete onload assignment type",
      id: "0ba708ea-944e-4b3d-8994-9401f171cf40",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Delete overload assignment type",
      id: "1c3addd4-63c1-4185-8740-7e108c4cf7b4",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gDeleteRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        //Make request
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gDeleteRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });

    postman[Request]({
      name: "Get After Delete overload assignment type",
      id: "1b7eff7d-0aea-47e3-8a07-10f5c9e6b597",
      method: "POST",
      address: "{{gUrl}}",
      data: "{{gGetRequestBody}}",
      headers: {
        "Content-Type": "application/json",
        [`${pm[Var]("gAuthHeaderKey")}`]: "{{gAuthHeaderValue}}"
      },
      pre() {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        let API = data.Apis[pm.globals.get("gIndex")];

        //Make authorization header using basic auth or API key settings in the data file.
        //If data file does not autornization info, use environment variable if available.
        var hdr = apiUtility.makeAuthorization(
          API.ApiKey,
          API.User,
          API.Password,
          pm.environment.get("envApiKey"),
          pm.environment.get("envAuthUser"),
          pm.environment.get("envAuthPassword")
        );
        pm.globals.set("gAuthHeaderKey", hdr.key);
        pm.globals.set("gAuthHeaderValue", hdr.value);
        // console.log(pm.globals.get('gAuthHeaderKey'));
        // console.log(pm.globals.get('gAuthHeaderValue'));

        // Make URL
        pm.globals.set(
          "gUrl",
          apiUtility.makeUrl(
            pm.environment.get("envWebScheme"),
            pm.environment.get("envWebHost"),
            API.RequestUrl
          )
        );
        //console.log(pm.globals.get('gUrl'));

        // Make request body.
        // Make request body.
        var request = {};
        apiUtility.setChainProps(API.Chain, request);
        var req = apiUtility.mergeRequestBody(request, API.RequestBody);

        pm.globals.set("gGetRequestBody", JSON.stringify(req));
      },
      post(response) {
        // Load API utility code
        eval(postman.getGlobalVariable("gApiUtility"));

        // Get API configuration from data file
        let API = data.Apis[pm.globals.get("gIndex")];

        // --- Start test verifications             ---
        // --- Add your custom tests in 'test verifications' block ---
        pm.test("Verify response status is " + API.ResponseStatus, function() {
          pm.expect(pm.response.code).to.equal(API.ResponseStatus);
        });

        pm.test("Verify response body matches expected response ", function() {
          var actualresponse = JSON.parse(responseBody);
          pm.expect(
            apiUtility.verifyResponse(API.ResponseBody, pm.response.json())
          ).to.be.true;
        });
        // --- End test verification ---

        // If status is OK save properties for chaining
        if (pm.response.code === 200) {
          var rb = pm.response.json();
          if (API.ChainSource.length > 0) {
            let str = API.RequestId + ".response";
            apiUtility.globalStoreWrite(str, rb);
          }
        }

        // Increment the API index
        pm.globals.set("gIndex", Number(pm.globals.get("gIndex")) + 1);

        console.log(
          "--------------------------------------------------------------------------------------"
        );
      }
    });
  });
}
