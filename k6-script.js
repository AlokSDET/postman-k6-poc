// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    URL: "petstore.swagger.io",
    id: "",
    token: ""
  }
});

export default function() {
  postman[Request]({
    name: "Registration",
    id: "49ffe7e7-1f3b-4558-8fb9-06e1f751c83d",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/authaccount/registration",
    data:
      '{\r\n\r\n            "name":"Developer",\r\n            "email":"alok.s@gmail.com",\r\n            "password":123456\r\n}'
  });

  postman[Request]({
    name: "Login",
    id: "670a6928-8998-43a3-a824-e88e7969815b",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/authaccount/login",
    data: '{\r\n\t"email":"alok.s@gmail.com",\r\n\t"password":123456\r\n}',
    post(response) {
      pm.test("Your test name", function() {
        var jsonData = pm.response.json();
        let token = jsonData.data.Token;
        pm.environment.set("token", token);
      });
    }
  });

  postman[Request]({
    name: "Get users from page 1",
    id: "2524be44-4110-4f0c-ac3b-536d623f5937",
    method: "GET",
    address: "http://restapi.adequateshop.com/api/users?page=1",
    headers: {
      Authorization: "Bearer {{token}}"
    },
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test("Response has the required fields", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData).to.have.property("page");
        pm.expect(responseData).to.have.property("per_page");
        pm.expect(responseData).to.have.property("totalrecord");
        pm.expect(responseData).to.have.property("total_pages");
        pm.expect(responseData).to.have.property("data");
      });

      pm.test("Email is in a valid format", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.data).to.be.an("array");
        responseData.data.forEach(function(user) {
          pm.expect(user.email).to.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        });
      });
    }
  });

  postman[Request]({
    name: "User Details",
    id: "a6acf39f-6c88-4718-bb96-8fcb8e25f29d",
    method: "GET",
    address: "http://restapi.adequateshop.com/api/users/292528",
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "Create User",
    id: "a989a246-0fc2-4734-be9c-56bd49ad6486",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/users",
    data:
      '{\r\n\r\n\t"name":"photographer",\r\n\t"email":"photographer@gmail.com",\r\n\t"location":"USA"\r\n}',
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "update user details",
    id: "b5a0918c-8c30-4a59-be7e-c20850de263e",
    method: "PUT",
    address: "http://restapi.adequateshop.com/api/users/292528",
    data:
      '{\r\n    "id": 292543,\r\n\t"name":"photogrpher change name",\r\n\t"email":"photogrpher@gmail.com",\r\n\t"location":"USA"\r\n}',
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "Delete uSER",
    id: "959a784b-a9ca-4b2c-930a-a73b3b7fe54c",
    method: "DELETE",
    address: "http://restapi.adequateshop.com/api/users/292528",
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "https://fakestoreapi.com/products/1",
    id: "8241f9ec-bca3-4b22-8b8a-b2b83581e8a5",
    method: "GET",
    address: "https://fakestoreapi.com/products/1",
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test("Content-Type header is application/json", function() {
        pm.expect(pm.response.headers.get("Content-Type")).to.include(
          "application/json"
        );
      });

      pm.test("Price is a non-negative number", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData.price).to.be.a("number");
        pm.expect(responseData.price).to.be.at.least(0);
      });

      pm.test(
        "Rating object is present and contains expected properties",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.rating).to.exist;
          pm.expect(responseData.rating).to.have.property("rate");
          pm.expect(responseData.rating).to.have.property("count");
        }
      );
    }
  });
}
