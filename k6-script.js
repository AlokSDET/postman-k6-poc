// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "Registration",
    id: "abc7d7b1-7451-42a5-aa8c-85df8a4a8768",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/authaccount/registration",
    data:
      '{\r\n\r\n            "name":"Developer",\r\n            "email":"alok.s@gmail.com",\r\n            "password":123456\r\n}'
  });

  postman[Request]({
    name: "Login",
    id: "eebe827d-fda1-4a50-b4cf-73bfc88a026e",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/authaccount/login",
    data: '{\r\n\t"email":"alok.s@gmail.com",\r\n\t"password":123456\r\n}',
    post(response) {
      pm.test("Your test name", function() {
        var jsonData = pm.response.json();
        let token = jsonData.data.Token;
        pm.environment.set("token", token);
      });
    }
  });

  postman[Request]({
    name: "Get users from page 1",
    id: "717398da-b284-4a7a-aa81-f244c629c40e",
    method: "GET",
    address: "http://restapi.adequateshop.com/api/users?page=1",
    headers: {
      Authorization: "Bearer {{token}}"
    },
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test("Response has the required fields", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData).to.have.property("page");
        pm.expect(responseData).to.have.property("per_page");
        pm.expect(responseData).to.have.property("totalrecord");
        pm.expect(responseData).to.have.property("total_pages");
        pm.expect(responseData).to.have.property("data");
      });

      pm.test("Email is in a valid format", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.data).to.be.an("array");
        responseData.data.forEach(function(user) {
          pm.expect(user.email).to.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        });
      });
    }
  });

  postman[Request]({
    name: "User Details",
    id: "38988958-c9c4-47f2-8b44-873c995102c5",
    method: "GET",
    address: "http://restapi.adequateshop.com/api/users/292528",
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "Create User",
    id: "f10b9173-f7b3-4c00-a63f-beaddb28a1dd",
    method: "POST",
    address: "http://restapi.adequateshop.com/api/users",
    data:
      '{\r\n\r\n\t"name":"photographer",\r\n\t"email":"photographer@gmail.com",\r\n\t"location":"USA"\r\n}',
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "update user details",
    id: "4e2c6493-7fdd-4b6b-8d84-ef67408203c5",
    method: "PUT",
    address: "http://restapi.adequateshop.com/api/users/292528",
    data:
      '{\r\n    "id": 292543,\r\n\t"name":"photogrpher change name",\r\n\t"email":"photogrpher@gmail.com",\r\n\t"location":"USA"\r\n}',
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "Delete uSER",
    id: "b3ff991b-6231-4209-a1f2-801d6287de2e",
    method: "DELETE",
    address: "http://restapi.adequateshop.com/api/users/292528",
    headers: {
      Authorization: "Bearer {{token}}"
    }
  });

  postman[Request]({
    name: "https://fakestoreapi.com/products/1",
    id: "9f03e53d-9044-40f0-a9e5-5c66e2b477a7",
    method: "GET",
    address: "https://fakestoreapi.com/products/1",
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.expect(pm.response.code).to.equal(200);
      });

      pm.test("Content-Type header is application/json", function() {
        pm.expect(pm.response.headers.get("Content-Type")).to.include(
          "application/json"
        );
      });

      pm.test("Price is a non-negative number", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData.price).to.be.a("number");
        pm.expect(responseData.price).to.be.at.least(0);
      });

      pm.test(
        "Rating object is present and contains expected properties",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.rating).to.exist;
          pm.expect(responseData.rating).to.have.property("rate");
          pm.expect(responseData.rating).to.have.property("count");
        }
      );
    }
  });
}
